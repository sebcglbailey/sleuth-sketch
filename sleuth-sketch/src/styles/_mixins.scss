@mixin transition($properties...) {
    $all: ();

    @for $i from 1 through length($properties) {
        $property: append(nth($properties, $i), $animation-duration, space);
        $property: append($property, $animation-in-timing, space);
        $all: append($all, $property, comma);
    }

    transition: $all;
}

@mixin animation($animate) {
    -webkit-animation: #{$animate} $animation-duration;
    -moz-animation: #{$animate} $animation-duration;
    animation: #{$animate} $animation-duration;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

@mixin container {
    padding-right: $gp;
    padding-left: $gp;
    margin-right: auto;
    margin-left: auto;

    @media($large) {
        max-width: var(--container-max-width, #{$container-width});
    }
}

@mixin circle($width) {
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: $width;
    width: $width;
}

@mixin ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: var(--text-wrap, nowrap);
}

@mixin ellipsis-multiline($lines, $max-height: null) {
    max-height: $max-height;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
}

@mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
        @content;
    }
}

@mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
        @content;
    }

    @include optional-at-root(':-moz-placeholder') {
        @content;
    }

    @include optional-at-root('::-moz-placeholder') {
        @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
        @content;
    }
}

@mixin prevent-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin overlay-background {
    background-color: $transparent-background;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: var(--modal-zindex, #{$zindex-modal});
}

@mixin margin-start($value, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            margin-left: $value;
        }
    } @else {
        margin-left: $value;
    }

    [dir=rtl] & {
        @if $strict == false { margin-left: 0; };
        margin-right: $value;
    }
}

@mixin margin-end($value, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            margin-right: $value;
        }
    } @else {
        margin-right: $value;
    }

    [dir=rtl] & {
        @if $strict == false { margin-right: 0; };
        margin-left: $value;
    }
}

@mixin margin($values, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            margin: $values;
        }
    } @else {
        margin: $values;
    }

    @if length($values) == 4 {
        [dir=rtl] & {
            margin: nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2);
        }
    }
}

@mixin padding-start($value, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            padding-left: $value;
        }
    } @else {
        padding-left: $value;
    }

    [dir=rtl] & {
        @if $strict == false { padding-left: 0; };
        padding-right: $value;
    }
}

@mixin padding-end($value, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            padding-right: $value;
        }
    } @else {
        padding-right: $value;
    }

    [dir=rtl] & {
        @if $strict == false { padding-right: 0; };
        padding-left: $value;
    }
}

@mixin padding($values, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            padding: $values;
        }
    } @else {
        padding: $values;
    }

    @if length($values) == 4 {
        [dir=rtl] & {
            padding: nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2);
        }
    }
}

@mixin position($values, $strict: false) {
    position: nth($values, 1);

    @if length($values) == 5 {
        @if $strict == true {
            [dir=ltr] & {
                top: nth($values, 2);
                right: nth($values, 3);
                bottom: nth($values, 4);
                left: nth($values, 5);
            }
        } @else {
            top: nth($values, 2);
            right: nth($values, 3);
            bottom: nth($values, 4);
            left: nth($values, 5);
        }

        [dir=rtl] & {
            top: nth($values, 2);
            left: nth($values, 3);
            bottom: nth($values, 4);
            right: nth($values, 5);
        }
    } @else if length($values) == 4 {
        top: nth($values, 2);
        right: nth($values, 3);
        bottom: nth($values, 4);
        left: nth($values, 3);
    } @else if length($values) == 3 {
        top: nth($values, 2);
        right: nth($values, 3);
        bottom: nth($values, 2);
        left: nth($values, 3);
    } @else if length($values) == 2 {
        top: nth($values, 2);
        right: nth($values, 2);
        bottom: nth($values, 2);
        left: nth($values, 2);
    }
}

@mixin position-start($value: 0, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            left: $value;
        }
    } @else {
        left: $value;
    }

    [dir=rtl] & {
        @if $strict == false { left: auto; };
        right: $value;
    }
}

@mixin position-end($value: 0, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            right: $value;
        }
    } @else {
        right: $value;
    }

    [dir=rtl] & {
        @if $strict == false { right: auto; };
        left: $value;
    }
}

@mixin border-start($value, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            border-left: $value;
        }
    } @else {
        border-left: $value;
    }

    [dir=rtl] & {
        @if $strict == false { border-left: none; };
        border-right: $value;
    }
}

@mixin border-end($value, $strict: false) {
    @if $strict == true {
        [dir=ltr] & {
            border-right: $value;
        }
    } @else {
        border-right: $value;
    }

    [dir=rtl] & {
        @if $strict == false { border-right: none; };
        border-left: $value;
    }
}

@mixin border-radius($values) {
    border-radius: $values;

    @if length($values) == 3 {
        [dir=rtl] & {
            border-radius: nth($values, 2) nth($values, 1) nth($values, 2) nth($values, 3);
        }
    }

    @if length($values) == 4 {
        [dir=rtl] & {
            border-radius: nth($values, 2) nth($values, 1) nth($values, 4) nth($values, 3);
        }
    }
}

@mixin float-start {
    float: left;

    [dir=rtl] & {
        float: right;
    }
}

@mixin float-end {
    float: right;

    [dir=rtl] & {
        float: left;
    }
}

@mixin text-align-start {
    text-align: left;

    [dir=rtl] & {
        text-align: right;
    }
}

@mixin text-align-end {
    text-align: right;

    [dir=rtl] & {
        text-align: left;
    }
}

@mixin rtl-flip {
    [dir=rtl] & {
        transform: scaleX(-1);
    }
}

@mixin translate-x($value) {
    transform: translateX($value);

    [dir=rtl] & {
        transform: translateX(-$value);
    }
}
